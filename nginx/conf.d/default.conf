# PER IP RATE LIMITING
limit_req_zone $binary_remote_addr zone=per_ip:10m rate=10r/s;
limit_req_zone $http_cf_connecting_ip zone=per_cf_ip:10m rate=10r/s;

# GLOBAL RATE LIMITING
limit_req_zone $server_name zone=global:10m rate=100r/s;

# API-specific stricter rate limiting
limit_req_zone $binary_remote_addr zone=api_per_ip:10m rate=5r/s;
limit_req_zone $http_cf_connecting_ip zone=api_per_cf_ip:10m rate=5r/s;
limit_req_zone $server_name zone=api_global:10m rate=50r/s;

# CONNECTION LIMITING
limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
limit_conn_zone $http_cf_connecting_ip zone=conn_per_cf_ip:10m;

# Define custom log format for API debugging
log_format apiformat '$remote_addr - $http_cf_connecting_ip - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'Auth:"$http_authorization" Body:"$request_body"';

log_format rate_limit_format '$remote_addr - $http_cf_connecting_ip [$time_local] "$request" '
                             '$status $body_bytes_sent "$http_referer" '
                             '"$http_user_agent" rate_limited="$limit_req_status"';

# Define cache paths and zones
proxy_cache_path /var/cache/nginx/static_cache levels=1:2 keys_zone=static_cache:10m max_size=1g
                 inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/api_cache levels=1:2 keys_zone=api_cache:10m max_size=500m
                 inactive=30m use_temp_path=off;

# HTTP server - redirect to HTTPS
server {
    listen 80 default_server;
    server_name shilldao.xyz www.shilldao.xyz;

    limit_req zone=per_ip burst=20 nodelay;
    limit_req zone=per_cf_ip burst=20 nodelay;
    limit_req zone=global burst=100 nodelay;

    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 80;
    server_name shillers.org www.shillers.org;

    limit_req zone=per_ip burst=20 nodelay;
    limit_req zone=per_cf_ip burst=20 nodelay;

    return 301 https://shilldao.xyz$request_uri;
}

# HTTPS server configuration for Cloudflare Flexible SSL mode
server {
    listen 443 ssl;
    server_name shilldao.xyz www.shilldao.xyz;

    limit_req zone=per_ip burst=50 nodelay;
    limit_req zone=per_cf_ip burst=50 nodelay;
    limit_req zone=global burst=200 nodelay;

    limit_conn conn_per_ip 20;
    limit_conn conn_per_cf_ip 20;

    limit_req_status 429;
    error_page 429 /rate_limit.html;

    ssl_certificate /etc/nginx/certs/origin-cert.pem;
    ssl_certificate_key /etc/nginx/certs/origin-key.pem;

    # Basic SSL configuration for Flexible mode
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Performance optimizations
    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_disable "msie6";

    # Add custom response header to identify the server
    add_header X-Server "Nginx" always;

    # Add Cloudflare IP ranges as trusted proxies
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 131.0.72.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;

    real_ip_header CF-Connecting-IP;

    location = /rate_limit.html {
        internal;
        return 429 '{"error": "Rate limit exceeded", "message": "Too many requests. Please slow down.", "retry_after": 60}';
        add_header Content-Type application/json;
    }

    location = / {
        return 301 $scheme://$server_name/dashboard;
    }

    # Specific location for statistics overview to disable caching
    location /api/v1/statistics/overview {
        limit_req zone=api_per_ip burst=5 nodelay;
        limit_req zone=api_per_cf_ip burst=5 nodelay;
        limit_req zone=api_global burst=20 nodelay;

        proxy_pass http://backend:8000;
        include proxy_params;
        proxy_no_cache 1; # Do not cache this specific endpoint
        proxy_cache_bypass 1; # Bypass cache for this specific endpoint
        add_header X-Cache-Status "BYPASSED" always; # Indicate cache bypass
        access_log /var/log/nginx/api_access.log rate_limit_format;
    }

    # Backend - DJANGO API with selective caching
    location /api {
        limit_req zone=api_per_ip burst=20 nodelay;
        limit_req zone=api_per_cf_ip burst=20 nodelay;
        limit_req zone=api_global burst=100 nodelay;

        access_log /var/log/nginx/api_access.log rate_limit_format;
        proxy_pass http://backend:8000;
        include proxy_params;

        # Cache GET and HEAD requests
        proxy_cache api_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;

        # Skip cache for requests with authentication
        proxy_cache_bypass $http_authorization;

        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status;

        # Don't cache if these arguments exist
        proxy_cache_bypass $arg_nocache $arg_comment;
        proxy_no_cache $http_pragma $http_authorization;
    }

    # Admin - No caching for admin
    location /admin {
        limit_req zone=per_ip burst=30 nodelay;
        limit_req zone=per_cf_ip burst=30 nodelay;

        proxy_pass http://backend:8000;
        include proxy_params;

        # Explicitly disable caching for admin
        proxy_no_cache 1;
        proxy_cache_bypass 1;
    }

    # Media files served directly from Nginx
    location ^~ /media {
        limit_req zone=per_ip burst=100 nodelay;
        limit_req zone=per_cf_ip burst=100 nodelay;

        alias /app/media; # Corrected alias to match volume mount
        add_header X-Media-Block-Hit "ProcessedByMediaLocation" always; # Custom header for debugging
        expires 30d;
        access_log /var/log/nginx/media_access.log; # Enable specific access log (default format)
        error_log /var/log/nginx/media_error.log info; # Enable specific error log (info level)
        add_header Cache-Control "public, max-age=2592000";
    }

    # Static files for Django with enhanced caching
    location /static {
        limit_req zone=per_ip burst=100 nodelay;
        limit_req zone=per_cf_ip burst=100 nodelay;

        try_files $uri @backend_static;
        expires 30d;
        access_log off;
        add_header Cache-Control "public, max-age=2592000";

        # Enable static file caching
        proxy_cache static_cache;
        proxy_cache_valid 200 302 30d;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        proxy_cache_background_update on;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # Fallback for static files
    location @backend_static {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Frontend - NEXT.JS (this should handle ALL remaining requests including /_next/static/)
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Add caching for Next.js static assets
    location ~* ^/_next/static/.*\.(js|css|woff|woff2|ttf|otf|eot|ico|png|jpg|jpeg|gif|svg)$ {
        limit_req zone=per_ip burst=200 nodelay;
        limit_req zone=per_cf_ip burst=200 nodelay;

        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto $scheme;

        # Enable aggressive caching for static assets
        proxy_cache static_cache;
        proxy_cache_valid 200 302 30d;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        proxy_cache_background_update on;

        expires 30d;
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header X-Cache-Status $upstream_cache_status;
        access_log off;
    }

    # Cache static image files
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
        limit_req zone=per_ip burst=100 nodelay;
        limit_req zone=per_cf_ip burst=100 nodelay;

        proxy_cache static_cache;
        proxy_cache_valid 200 302 30d;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;

        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        add_header X-Cache-Status $upstream_cache_status;
        access_log off;

        try_files $uri @frontend;
    }

    # Cache CSS and JavaScript files
    location ~* \.(css|js)$ {
        limit_req zone=per_ip burst=100 nodelay;
        limit_req zone=per_cf_ip burst=100 nodelay;

        proxy_cache static_cache;
        proxy_cache_valid 200 302 7d;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;

        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        add_header X-Cache-Status $upstream_cache_status;
        access_log off;

        try_files $uri @frontend;
    }

    # Cache font files
    location ~* \.(woff|woff2|ttf|otf|eot)$ {
        limit_req zone=per_ip burst=100 nodelay;
        limit_req zone=per_cf_ip burst=100 nodelay;

        proxy_cache static_cache;
        proxy_cache_valid 200 302 30d;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;

        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        add_header X-Cache-Status $upstream_cache_status;
        access_log off;

        try_files $uri @frontend;
    }

    # Fallback location for try_files
    location @frontend {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Long timeout for API requests
    proxy_connect_timeout 300s;
    proxy_read_timeout 300s;
    proxy_send_timeout 300s;
}